{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["formReducer","state","event","reset","apple","count","name","value","App","useReducer","formData","setFormData","useState","submitting","setSubmitting","handleChange","isCheckbox","target","type","checked","className","Object","entries","map","toString","onSubmit","preventDefault","setTimeout","disabled","onChange","step","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sPAGMA,EAAc,SAACC,EAAOC,GAC1B,OAAGA,EAAMC,MACA,CACLC,MAAO,GACPC,MAAO,EACPC,KAAM,GACN,aAAa,GAIV,2BACDL,GADN,kBAEGC,EAAMI,KAAOJ,EAAMK,SAkFTC,MA9Ef,WACE,MAAgCC,qBAAWT,EAAa,CACtDK,MAAO,MADT,mBAAOK,EAAP,KAAiBC,EAAjB,KAIA,EAAoCC,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeMC,EAAe,SAAAb,GACnB,IAAMc,EAAmC,aAAtBd,EAAMe,OAAOC,KAChCP,EAAY,CACVL,KAAMJ,EAAMe,OAAOX,KACnBC,MAAOS,EAAad,EAAMe,OAAOE,QAAUjB,EAAMe,OAAOV,SAI5D,OACE,sBAAKa,UAAU,UAAf,UACE,wDACCP,GACD,sDACE,6BAAKQ,OAAOC,QAAQZ,GAAUa,KAAI,mCAAEjB,EAAF,KAAQC,EAAR,YAChC,+BAAe,iCAASD,IAAxB,IAAwCC,EAAMiB,aAArClB,WAKb,uBAAMmB,SAhCW,SAAAvB,GACnBA,EAAMwB,iBACNZ,GAAc,GAEda,YAAW,WACTb,GAAc,GACdH,EAAY,CACVR,OAAO,MAER,MAuBD,UACE,0BAAUyB,SAAUf,EAApB,SACC,kCACE,qCACA,uBAAOP,KAAK,OAAOuB,SAAUd,EAAcR,MAAOG,EAASJ,MAAQ,UAItE,2BAAUsB,SAAUf,EAApB,UACE,kCACE,uCACA,yBAAQP,KAAK,QAAQuB,SAAUd,EAAcR,MAAOG,EAASN,OAAS,GAAtE,UACE,wBAAQG,MAAM,GAAd,yCACA,wBAAQA,MAAM,OAAd,kBACA,wBAAQA,MAAM,MAAd,iBACA,wBAAQA,MAAM,YAAd,6BAGJ,kCACE,sCACA,uBAAOW,KAAK,SAASZ,KAAK,QAAQuB,SAAUd,EAAce,KAAK,IAAIvB,MAAOG,EAASL,OAAS,QAE9F,kCACE,0CACA,uBACEa,KAAK,WACLZ,KAAK,YACLuB,SAAUd,EACVI,QAAST,EAAS,eAAgB,EAClCkB,SAA6B,SAAnBlB,EAASN,cAIzB,wBAAQc,KAAK,SAASU,SAAUf,EAAhC,2BC/EOkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.49ad4d19.chunk.js","sourcesContent":["import React, {useReducer, useState} from 'react';\nimport './App.css';\n\nconst formReducer = (state, event) => {\n  if(event.reset) {\n    return {\n      apple: '',\n      count: 0,\n      name: '',\n      'gift-wrap': false,\n    }\n  }\n\n  return {\n    ... state,\n    [event.name]: event.value\n  }\n}\n\nfunction App() {\n  const [formData, setFormData] = useReducer(formReducer, {\n    count: 100,\n  })\n  \n  const [submitting, setSubmitting] = useState(false);\n  \n  const handleSubmit = event => {\n    event.preventDefault();\n    setSubmitting(true);\n\n    setTimeout(() => {\n      setSubmitting(false);\n      setFormData({\n        reset: true\n      })\n    }, 3000)\n\n  }\n\n  const handleChange = event => {\n    const isCheckbox = event.target.type === 'checkbox';\n    setFormData({\n      name: event.target.name,\n      value: isCheckbox ? event.target.checked : event.target.value,\n    });\n  }\n\n  return (\n    <div className=\"wrapper\">\n      <h1>How about them apples?</h1>\n      {submitting && \n      <div>You are submitting:\n        <ul>{Object.entries(formData).map(([name, value]) => (\n          <li key={name}><strong>{name}</strong>:{value.toString()}</li>\n        ))}\n        </ul>\n      </div>\n      }\n      <form onSubmit={handleSubmit}>\n        <fieldset disabled={submitting}>\n         <label> \n           <p>Name</p>\n           <input name=\"name\" onChange={handleChange} value={formData.name || ''}/>\n           \n         </label>\n        </fieldset>\n        <fieldset disabled={submitting}>\n          <label>\n            <p>Apples</p>\n            <select name=\"apple\" onChange={handleChange} value={formData.apple || ''}>\n              <option value=\"\">--Please choose an option--</option>\n              <option value=\"fuji\">Fuji</option>\n              <option value=\"cox\">Cox</option>\n              <option value=\"pink-lady\">Pink Lady</option>\n            </select>\n          </label>\n          <label>\n            <p>Count</p>\n            <input type=\"number\" name=\"count\" onChange={handleChange} step=\"1\" value={formData.count || ''}/>\n          </label>\n          <label>\n            <p>Gift Wrap</p>\n            <input \n              type=\"checkbox\" \n              name=\"gift-wrap\" \n              onChange={handleChange} \n              checked={formData['gift-wrap'] || false}\n              disabled={formData.apple !== 'fuji'}\n            />\n          </label>\n        </fieldset>\n        <button type=\"submit\" disabled={submitting}>Submit</button>\n      </form>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}